Week 2 Types, Operators, and Expressions

1) การใช้งานตัวแปร : ต้องมีการประกาศประเภทของตัวแปรก่อนทุกครั้ง แล้วตามด้วยชื่อตัวแปร โดยมีหลักการตั้งชื่อตัวแปร คือ
  - ชื่อประกอบด้วยอักขระและตัวเลข โดยตัวแรกต้องเป็นอักขระเท่านั้น ( _ นับเป็นอักขระ )
  - ตัวอักษรพิมพ์ใหญ่และพิมพ์เล็กถือว่าต่างกัน
  - มักจะใช้ตัวอักษรภาษาอังกฤษพิมพ์ใหญ่ทั้งหมดในการนิยามค่า symbolic constant
  - ชื่อตัวแปรห้ามซ้ำกับคีย์เวิร์ดในภาษา C
การตั้งชื่อตัวแปรหรือตั้งชื่อฟังก์ชัน : ควรให้อ่านแล้วเข้าใจได้ง่าย โดยมีรูปแบบที่ใช้กัน คือ
  - snake_case
  - CamelCase
2) ประเภทข้อมูลและขนาด
  - char 1 byte
  - int 4 bytes
  - float 4 bytes
  - double 8 bytes
  - long 4 or 8 bytes
  - void 1 byte ( ใช้ในกรณีไม่มีการส่งค่ากลับและใช้ในการกำหนดตัวแปรที่ไม่มีประเภทข้อมูล )
  short ช่วยลดพื้นที่จัดเก็บและ long ช่วยเพิ่มพื้นที่จัดเก็บข้อมูล ส่วน signed ใช้กำหนด int ให้สามารถเก็บค่าที่มีเครื่องหมาย ( ปกติเก็บแบบนี้อยู่แล้ว ) และ unsigned ใช้กำหนด int ให้เก็บเฉพาะค่าบวก
  และสามารถใช้ sizeof ในการตรวจสอบขนาดตัวแปรและประเภทข้อมูล
3) ค่าคงที่
  ค่าคงที่ของเลขฐานสอง ฐานแปดและฐานสิบหก
    - 0 ตามด้วยเลขจำนวนเต็ม : เลขที่อยู่ในรูปเลขฐานแปด ใช้ %o or %O ในการพิมพ์เลขฐานแปด
    - 0x or 0X ตามด้วยเลขจำนวนเต็ม : เลขที่อยู่ในรูปเลขฐานสิบหก ใช้ %x or %X ในการพิมพ์เลขฐานสิบหก
    - 0b or 0B ตามด้วยเลขจำนวนเต็ม : เลขที่อยู่ในรูปเลขฐานสอง
  ค่าคงที่ของตัวอักษร
    ตัวอักษระ ASCII สามารถแปลงกลับไปกลับมากับเลขจำนวนเต็มได้ บางตัวอ้างถึงโดยใช้ escape sequences ใช้ ' ' ในการเขียน
  ค่าคงที่สตริง
    จะเขียนด้วย " " ถ้าไม่มีสตริงอยู่ข้างในเลยหมายถึงสตริงว่าง ทุกสตริงจะมี \0 ต่อท้ายเสมอ
4) การประกาศตัวแปร : จะกำหนดไว้ข้างบนก่อนเรียกใช้งาน สามารถให้ค่าไม่เปลี่ยนได้ตลอดการทำงานโดยใช้ const
  printf() จะแตกต่างกับ puts() ตรงที่ puts() จะขึ้นบรรทัดใหม่ให้แต่ printf() จะไม่ขึ้นบรรทัดใหม่ให้ มีรปแบบการพิมพ์ ( format ) ของ printf() คือ
    %d or %i : พิมพ์เลขจำนวนเต็ม
    %f : พิมพ์เลขทศนิยม
    %c : พิมพ์ตัวอักษร
    %s : พิมพ์ข้อความ
    %% : พิมพ์ %
  EOF ( end-of-file ) เป็นค่าคงที่ที่ถูกกำหนดบ่งบอกถึงจุดสิ้นสุดข้อมูล
5) ตัวดำเนินการทางคณิตศาสตร์
  - นิพจน์ ( expression ) ใช้หาค่าและได้ค่าออกมา
  - % ไม่สามารถใช้กับ double และ float ได้
  - / หาก int หารกับ int จะได้ int ที่ถูกตัดเศษทิ้งไป
  - +,- เป็น unary operator ได้
  - หาก operator มีค่าเท่ากันจะพิจารณาจากซ้ายไปขวา
6) Relational Operators & Logical Operators : จะให้ค่าความจริงออกมา
  comma operator : หากมีการใช้ comma ผลของการตีความนิพจน์จะได้ค่าของนิพจน์ตัวสุดท้ายที่อยู่หลัง comma
7) Type Conversion : การนำค่าของข้อมูลต่างๆ มาใช้งานผ่าน operator ร่วมกัน compiler จะแปลงประเภทข้อมูลที่ narrow ไปยังประภทข้อมูลที่ wider
  float ไม่สามารถใช้เป็น subscript ในอาเรย์ได้
8) Increment & Decrement Operators ex. i++ ++i
9) Bitwise Operators : ค่าที่ได้จะเป็นเลข bit
  conditional expression expr1 ? expr2 : expr3
    expr1 เป็นเงื่อนไขของการพิจารณา expr2 และ expr3
    expr2 จะเข้าเมื่อเป็นความจริง
    expr3 จะเข้าเมื่อเป็นเท็จ

